- name: copy rbac_override
  template:
    src: rbac_override.yaml.j2
    dest: "{{root_path}}/rbac_override.yaml"
  run_once: yes

- name: check cluster-admin status
  shell: kubectl get clusterrolebinding --all-namespaces | grep cluster-admin | awk '{print $1}'
  args:
    chdir: "{{workdir}}"
  register: rbac_exists

- name: override default rbac settings
  shell: kubectl apply -f {{root_path}}/rbac_override.yaml
  args:
    chdir: "{{root_path}}"
  run_once: yes
  when: rbac_exists.stdout != "cluster-admin"

- name: check helm
  shell: which helm
  register: helm_exists

- name: get helm install script
  get_url:
    url: "{{helm_install}}"
    dest: "{{helm_install_path}}" 
    mode: 0700
    owner: "{{ansible_user_id}}"
    group: "{{ansible_user_gid}}"
  run_once: yes
  when: helm_exists.stdout != "/usr/local/bin/helm"
  
- name: run helm install script
  shell: ./get_helm.sh
  args:
    chdir: "{{root_path}}"
  run_once: yes
  when: helm_exists.stdout != "/usr/local/bin/helm"

- name: check helm version
  shell:  helm version -s --tiller-connection-timeout 10 2>&1 | awk '{print $1}'
  args:
    chdir: "{{workdir}}"
  register: tiller_deployed

- name: helm init
  shell: helm init
  args:
    chdir: "{{root_path}}"
  run_once: yes
  when: tiller_deployed.stdout == "Error:"

- name: install epel
  yum:
    name: epel-release
    state: present
  become: yes

- name: install deps
  yum:
    name: "{{item}}"
    state: present
  with_items:
    - ansible
    - python-pip
    - python-devel
  become: yes

- name: create kolla workdir
  file:
    path: "{{workdir}}"
    state: directory

- name: clone kolla-ansible repo
  git:
    repo: http://github.com/openstack/kolla-ansible
    dest: "{{workdir}}/kolla-ansible"

- name: clone kolla-kubernetes repo
  git:
    repo: https://github.com/jonathanelbailey/kolla-kubernetes.git
    dest: "{{workdir}}/kolla-kubernetes"

- name: install deps from repos
  pip:
    name: "{{item}}"
    state: latest
  with_items:
    - "{{workdir}}/kolla-ansible/"
    - "{{workdir}}/kolla-kubernetes/"
  become: yes

- name: check that folders exist
  stat:
    path: "{{item}}"
  with_items:
    - /etc/kolla
    - /etc/kolla-kubernetes
  register: folders_exist

- name: copy default kolla config to /etc
  shell: cp -aR /usr/share/kolla-ansible/etc_examples/kolla /etc
  args:
    chdir: "{{workdir}}"
  become: yes
  run_once: yes
  when: folders_exist.results[0].stat.exists == false

- name: copy default kolla-kubernetes config to /etc
  shell: cp -aR kolla-kubernetes/etc/kolla-kubernetes /etc
  args:
    chdir: "{{workdir}}"
  become: yes
  run_once: yes
  when: folders_exist.results[1].stat.exists == false

- name: check that password are populated
  shell: head -n 1 /etc/kolla/passwords.yml | awk '{print $1}'
  become: yes
  register: passwords

- name: generate default passwords
  shell: kolla-kubernetes-genpwd
  args:
    chdir: "{{workdir}}"
  become: yes
  run_once: yes
  when: passwords.stdout != "aodh_database_password:"

- name: create kolla namespace
  k8s_raw:
    state: present
    name: kolla
    kind: Namespace
  
- name: check compute label
  shell: kubectl get node --show-labels |grep $(hostname)| awk '{print $6}'| awk -F "," '{for(i=1;i<=NF;i++) {if($i ~ /kolla_compute/){print $i}}}'
  args:
    chdir: "{{workdir}}"
  register: compute_label

- name: check controller label
  shell: kubectl get node --show-labels |grep $(hostname)| awk '{print $6}'| awk -F "," '{for(i=1;i<=NF;i++) {if($i ~ /kolla_controller/){print $i}}}'
  args:
    chdir: "{{workdir}}"
  register: controller_label

- name: add kolla_compute label to node
  shell: kubectl label node $(hostname) kolla_compute=true
  args:
    chdir: "{{workdir}}"
  run_once: yes
  when: compute_label.stdout != "kolla_compute=true"

- name: add kolla_controller label to node
  shell: kubectl label node $(hostname) kolla_controller=true
  args:
    chdir: "{{workdir}}"
  run_once: yes
  when: controller_label.stdout != "kolla_controller=true"

- name: create globals.yml
  template:
    src: globals.yml.j2
    dest: /etc/kolla/globals.yml
  become: yes

- name: create kolla config path
  file:
    state: directory
    path: /etc/kolla/config
  become: yes

- name: add nova.conf
  template:
    src: nova.conf.j2
    dest: /etc/kolla/config/nova.conf
  become: yes

- name: create the default configuration
  shell: ansible-playbook -e ansible_python_interpreter=/usr/bin/python -e @/etc/kolla/globals.yml -e @/etc/kolla/passwords.yml -e CONFIG_DIR=/etc/kolla kolla-kubernetes/ansible/site.yml
  args:
    chdir: "{{workdir}}"
  become: yes
  run_once: yes

- name: check secrets count
  shell: kubectl get secrets -n kolla | wc -l
  args:
    chdir: "{{workdir}}"
  register: secrets_count

- name: generate the kuberenetes secrets
  shell: "{{workdir}}/kolla-kubernetes/tools/secret-generator.py create"
  args:
    chdir: "{{workdir}}"
  run_once: yes
  when: secrets_count.stdout != "122"

- name: check for configmaps
  shell: kollakube res status configmap tgtd | grep tgtd | awk '{print $1}'
  args:
    chdir: "{{workdir}}"
  register: configmaps_exist

- name: create and register the kolla config maps
  shell: |
    kollakube res create configmap \
      mariadb keystone horizon rabbitmq memcached nova-api nova-conductor \
      nova-scheduler glance-api-haproxy glance-registry-haproxy glance-api \
      glance-registry neutron-server neutron-dhcp-agent neutron-l3-agent \
      neutron-metadata-agent neutron-openvswitch-agent openvswitch-db-server \
      openvswitch-vswitchd nova-libvirt nova-compute nova-consoleauth \
      nova-novncproxy nova-novncproxy-haproxy neutron-server-haproxy \
      nova-api-haproxy cinder-api cinder-api-haproxy cinder-backup \
      cinder-scheduler cinder-volume iscsid tgtd keepalived \
      placement-api placement-api-haproxy
  args:
    chdir: "{{workdir}}"
  run_once: yes
  when: configmaps_exist.stdout != "tgtd"

- name: check for charts
  shell: ls | grep ".tgz" | wc -l
  args:
    chdir: "{{workdir}}"
  register: charts_count

- name: build helm microcharts, service charts, and metacharts
  shell: "{{workdir}}/kolla-kubernetes/tools/helm_build_all.sh ."
  args:
    chdir: "{{workdir}}"
  run_once: yes
  when: charts_count.stdout != "200"

- name: copy cloud.yaml to workdir
  template:
    src: cloud.yaml.j2
    dest: "{{workdir}}/cloud.yaml"

